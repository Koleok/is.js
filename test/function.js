/* global expect, is */
/* eslint-env mocha */
/* eslint no-empty-function: 0, no-new-func: 0, no-new-wrappers: 0, no-unused-expressions: 0 */

describe( 'bundle:function' , function () {

  it( 'is.function' , function () {

    expect( is[ 'function' ]( null ) ).to.not.be.ok()
    expect( is[ 'function' ]( void 0 ) ).to.not.be.ok()
    expect( is[ 'function' ]( 0 ) ).to.not.be.ok()
    expect( is[ 'function' ]( 0 / 0 ) ).to.not.be.ok()
    expect( is[ 'function' ]( +1 / 0 ) ).to.not.be.ok()
    expect( is[ 'function' ]( -1 / 0 ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Number( 0 ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Number( 0 / 0 ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Number( +1 / 0 ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Number( -1 / 0 ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( '' ) ).to.not.be.ok()
    expect( is[ 'function' ]( new String( '' ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( true ) ).to.not.be.ok()
    expect( is[ 'function' ]( false ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Boolean( true ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Boolean( false ) ) ).to.not.be.ok()
    expect( is[ 'function' ]( {} ) ).to.not.be.ok()
    expect( is[ 'function' ]( [] ) ).to.not.be.ok()
    expect( is[ 'function' ]( arguments ) ).to.not.be.ok()
    expect( is[ 'function' ]( function () {} ) ).to.be.ok()
    expect( is[ 'function' ]( new Function() ) ).to.be.ok()
    expect( is[ 'function' ]( new Date() ) ).to.not.be.ok()
    expect( is[ 'function' ]( new Error() ) ).to.not.be.ok()
    expect( is[ 'function' ]( /^/ ) ).to.not.be.ok()

    expect( is.not[ 'function' ]( null ) ).to.be.ok()
    expect( is.not[ 'function' ]( void 0 ) ).to.be.ok()
    expect( is.not[ 'function' ]( 0 ) ).to.be.ok()
    expect( is.not[ 'function' ]( 0 / 0 ) ).to.be.ok()
    expect( is.not[ 'function' ]( +1 / 0 ) ).to.be.ok()
    expect( is.not[ 'function' ]( -1 / 0 ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Number( 0 ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Number( 0 / 0 ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Number( +1 / 0 ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Number( -1 / 0 ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( '' ) ).to.be.ok()
    expect( is.not[ 'function' ]( new String( '' ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( true ) ).to.be.ok()
    expect( is.not[ 'function' ]( false ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Boolean( true ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Boolean( false ) ) ).to.be.ok()
    expect( is.not[ 'function' ]( {} ) ).to.be.ok()
    expect( is.not[ 'function' ]( [] ) ).to.be.ok()
    expect( is.not[ 'function' ]( arguments ) ).to.be.ok()
    expect( is.not[ 'function' ]( function () {} ) ).to.not.be.ok()
    expect( is.not[ 'function' ]( new Function() ) ).to.not.be.ok()
    expect( is.not[ 'function' ]( new Date() ) ).to.be.ok()
    expect( is.not[ 'function' ]( new Error() ) ).to.be.ok()
    expect( is.not[ 'function' ]( /^/ ) ).to.be.ok()

  } )

} )
