/* global expect, is */
/* eslint-env mocha */
/* eslint no-empty-function: 0, no-new-wrappers: 0, no-unused-expressions: 0 */

describe( 'bundle:boolean' , function () {

  it( 'is.boolean' , function () {

    expect( is.boolean( null ) ).to.not.be.ok()
    expect( is.boolean( void 0 ) ).to.not.be.ok()
    expect( is.boolean( 0 ) ).to.not.be.ok()
    expect( is.boolean( 1 ) ).to.not.be.ok()
    expect( is.boolean( 0 / 0 ) ).to.not.be.ok()
    expect( is.boolean( +1 / 0 ) ).to.not.be.ok()
    expect( is.boolean( -1 / 0 ) ).to.not.be.ok()
    expect( is.boolean( new Number( 0 ) ) ).to.not.be.ok()
    expect( is.boolean( new Number( 1 ) ) ).to.not.be.ok()
    expect( is.boolean( new Number( 0 / 0 ) ) ).to.not.be.ok()
    expect( is.boolean( new Number( +1 / 0 ) ) ).to.not.be.ok()
    expect( is.boolean( new Number( -1 / 0 ) ) ).to.not.be.ok()
    expect( is.boolean( '' ) ).to.not.be.ok()
    expect( is.boolean( 'lipsum' ) ).to.not.be.ok()
    expect( is.boolean( new String( '' ) ) ).to.not.be.ok()
    expect( is.boolean( new String( 'lipsum' ) ) ).to.not.be.ok()
    expect( is.boolean( true ) ).to.be.ok()
    expect( is.boolean( false ) ).to.be.ok()
    expect( is.boolean( new Boolean( true ) ) ).to.not.be.ok()
    expect( is.boolean( new Boolean( false ) ) ).to.not.be.ok()
    expect( is.boolean( {} ) ).to.not.be.ok()
    expect( is.boolean( [] ) ).to.not.be.ok()
    expect( is.boolean( arguments ) ).to.not.be.ok()
    expect( is.boolean( function () {} ) ).to.not.be.ok()
    expect( is.boolean( new Date() ) ).to.not.be.ok()
    expect( is.boolean( new Error() ) ).to.not.be.ok()
    expect( is.boolean( /^/ ) ).to.not.be.ok()

    expect( is.not.boolean( null ) ).to.be.ok()
    expect( is.not.boolean( void 0 ) ).to.be.ok()
    expect( is.not.boolean( 0 ) ).to.be.ok()
    expect( is.not.boolean( 1 ) ).to.be.ok()
    expect( is.not.boolean( 0 / 0 ) ).to.be.ok()
    expect( is.not.boolean( +1 / 0 ) ).to.be.ok()
    expect( is.not.boolean( -1 / 0 ) ).to.be.ok()
    expect( is.not.boolean( new Number( 0 ) ) ).to.be.ok()
    expect( is.not.boolean( new Number( 1 ) ) ).to.be.ok()
    expect( is.not.boolean( new Number( 0 / 0 ) ) ).to.be.ok()
    expect( is.not.boolean( new Number( +1 / 0 ) ) ).to.be.ok()
    expect( is.not.boolean( new Number( -1 / 0 ) ) ).to.be.ok()
    expect( is.not.boolean( '' ) ).to.be.ok()
    expect( is.not.boolean( 'lipsum' ) ).to.be.ok()
    expect( is.not.boolean( new String( '' ) ) ).to.be.ok()
    expect( is.not.boolean( new String( 'lipsum' ) ) ).to.be.ok()
    expect( is.not.boolean( true ) ).to.not.be.ok()
    expect( is.not.boolean( false ) ).to.not.be.ok()
    expect( is.not.boolean( new Boolean( true ) ) ).to.be.ok()
    expect( is.not.boolean( new Boolean( false ) ) ).to.be.ok()
    expect( is.not.boolean( {} ) ).to.be.ok()
    expect( is.not.boolean( [] ) ).to.be.ok()
    expect( is.not.boolean( arguments ) ).to.be.ok()
    expect( is.not.boolean( function () {} ) ).to.be.ok()
    expect( is.not.boolean( new Date() ) ).to.be.ok()
    expect( is.not.boolean( new Error() ) ).to.be.ok()
    expect( is.not.boolean( /^/ ) ).to.be.ok()

  } )

} )
